// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TestTask.Minesweeper.Persistence;

#nullable disable

namespace TestTask.Minesweeper.Persistence.Migrations
{
    [DbContext(typeof(GameDbContext))]
    partial class GameDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TestTask.Minesweeper.Domain.Entities.GameSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Identifier");

                    b.Property<int>("MinesCount")
                        .HasColumnType("integer")
                        .HasComment("Count of mines.");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((byte)0)
                        .HasComment("Status.");

                    b.ComplexProperty<Dictionary<string, object>>("FieldSize", "TestTask.Minesweeper.Domain.Entities.GameSession.FieldSize#Size2d", b1 =>
                        {
                            b1.Property<int>("Height")
                                .HasColumnType("integer")
                                .HasComment("Height of game field.");

                            b1.Property<int>("Width")
                                .HasColumnType("integer")
                                .HasComment("Width of game field.");
                        });

                    b.HasKey("Id");

                    b.ToTable("gameSessions", (string)null);
                });

            modelBuilder.Entity("TestTask.Minesweeper.Domain.Entities.Snapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasComment("Identifier of snapshot.");

                    b.Property<byte[]>("Field")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasComment("Game field");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasComment("Identifier of game session.");

                    b.Property<int?>("TurnNumber")
                        .HasColumnType("integer")
                        .HasComment("Number of turn.");

                    b.HasKey("Id");

                    b.HasIndex("GameSessionId", "TurnNumber")
                        .IsUnique();

                    NpgsqlIndexBuilderExtensions.AreNullsDistinct(b.HasIndex("GameSessionId", "TurnNumber"), false);

                    b.ToTable("snapshots", (string)null);
                });

            modelBuilder.Entity("TestTask.Minesweeper.Domain.Entities.Turn", b =>
                {
                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("Number")
                        .HasComment("Number of turn.");

                    b.Property<Guid>("GameSessionId")
                        .HasColumnType("uuid")
                        .HasComment("Identifier of game session.");

                    b.ComplexProperty<Dictionary<string, object>>("CellCoordinates", "TestTask.Minesweeper.Domain.Entities.Turn.CellCoordinates#Point2d", b1 =>
                        {
                            b1.Property<short>("X")
                                .HasColumnType("smallint")
                                .HasComment("X-coordinate of target cell.");

                            b1.Property<short>("Y")
                                .HasColumnType("smallint")
                                .HasComment("Y-coordinate of target cell.");
                        });

                    b.HasKey("Number", "GameSessionId");

                    b.ToTable("turns", (string)null);
                });

            modelBuilder.Entity("TestTask.Minesweeper.Domain.Entities.Snapshot", b =>
                {
                    b.HasOne("TestTask.Minesweeper.Domain.Entities.GameSession", "GameSession")
                        .WithMany("Snapshots")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TestTask.Minesweeper.Domain.Entities.Turn", "Turn")
                        .WithOne()
                        .HasForeignKey("TestTask.Minesweeper.Domain.Entities.Snapshot", "GameSessionId", "TurnNumber")
                        .HasPrincipalKey("TestTask.Minesweeper.Domain.Entities.Turn", "GameSessionId", "Number")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("GameSession");

                    b.Navigation("Turn");
                });

            modelBuilder.Entity("TestTask.Minesweeper.Domain.Entities.Turn", b =>
                {
                    b.HasOne("TestTask.Minesweeper.Domain.Entities.GameSession", "GameSession")
                        .WithMany("Turns")
                        .HasForeignKey("GameSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameSession");
                });

            modelBuilder.Entity("TestTask.Minesweeper.Domain.Entities.GameSession", b =>
                {
                    b.Navigation("Snapshots");

                    b.Navigation("Turns");
                });
#pragma warning restore 612, 618
        }
    }
}
